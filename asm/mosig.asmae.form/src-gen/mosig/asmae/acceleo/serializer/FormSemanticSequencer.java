/*
 * generated by Xtext 2.25.0
 */
package mosig.asmae.acceleo.serializer;

import com.google.inject.Inject;
import java.util.Set;
import mosig.asmae.acceleo.form.FormPackage;
import mosig.asmae.acceleo.form.Model;
import mosig.asmae.acceleo.form.Question;
import mosig.asmae.acceleo.form.check;
import mosig.asmae.acceleo.form.choice;
import mosig.asmae.acceleo.form.input;
import mosig.asmae.acceleo.form.option;
import mosig.asmae.acceleo.form.radio;
import mosig.asmae.acceleo.services.FormGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class FormSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private FormGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == FormPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case FormPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case FormPackage.QUESTION:
				sequence_Question(context, (Question) semanticObject); 
				return; 
			case FormPackage.CHECK:
				sequence_check(context, (check) semanticObject); 
				return; 
			case FormPackage.CHOICE:
				sequence_choice(context, (choice) semanticObject); 
				return; 
			case FormPackage.INPUT:
				sequence_input(context, (input) semanticObject); 
				return; 
			case FormPackage.OPTION:
				sequence_option(context, (option) semanticObject); 
				return; 
			case FormPackage.RADIO:
				sequence_radio(context, (radio) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     (name=STRING lesQuestions+=Question*)
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Question returns Question
	 *
	 * Constraint:
	 *     (label=STRING kindOf=Kind)
	 */
	protected void sequence_Question(ISerializationContext context, Question semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FormPackage.Literals.QUESTION__LABEL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FormPackage.Literals.QUESTION__LABEL));
			if (transientValues.isValueTransient(semanticObject, FormPackage.Literals.QUESTION__KIND_OF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FormPackage.Literals.QUESTION__KIND_OF));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getQuestionAccess().getLabelSTRINGTerminalRuleCall_1_0(), semanticObject.getLabel());
		feeder.accept(grammarAccess.getQuestionAccess().getKindOfKindParserRuleCall_2_0(), semanticObject.getKindOf());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     check returns check
	 *
	 * Constraint:
	 *     (label=STRING name=ID)
	 */
	protected void sequence_check(ISerializationContext context, check semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FormPackage.Literals.CHECK__LABEL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FormPackage.Literals.CHECK__LABEL));
			if (transientValues.isValueTransient(semanticObject, FormPackage.Literals.CHECK__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FormPackage.Literals.CHECK__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCheckAccess().getLabelSTRINGTerminalRuleCall_1_0(), semanticObject.getLabel());
		feeder.accept(grammarAccess.getCheckAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Kind returns choice
	 *     choice returns choice
	 *
	 * Constraint:
	 *     (name=ID lesChoix+=check+)
	 */
	protected void sequence_choice(ISerializationContext context, choice semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Kind returns input
	 *     input returns input
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_input(ISerializationContext context, input semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FormPackage.Literals.KIND__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FormPackage.Literals.KIND__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInputAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Kind returns option
	 *     option returns option
	 *
	 * Constraint:
	 *     (name=ID lesOptions+=radio+)
	 */
	protected void sequence_option(ISerializationContext context, option semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     radio returns radio
	 *
	 * Constraint:
	 *     (label=STRING name=ID)
	 */
	protected void sequence_radio(ISerializationContext context, radio semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FormPackage.Literals.RADIO__LABEL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FormPackage.Literals.RADIO__LABEL));
			if (transientValues.isValueTransient(semanticObject, FormPackage.Literals.RADIO__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FormPackage.Literals.RADIO__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRadioAccess().getLabelSTRINGTerminalRuleCall_1_0(), semanticObject.getLabel());
		feeder.accept(grammarAccess.getRadioAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
}
