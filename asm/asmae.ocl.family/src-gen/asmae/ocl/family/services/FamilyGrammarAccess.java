/*
 * generated by Xtext 2.25.0
 */
package asmae.ocl.family.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class FamilyGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class FamilyModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "asmae.ocl.family.Family.FamilyModel");
		private final Assignment cFamiliesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cFamiliesFamilyParserRuleCall_0 = (RuleCall)cFamiliesAssignment.eContents().get(0);
		
		//FamilyModel:
		//    (families+=Family)* ;
		@Override public ParserRule getRule() { return rule; }
		
		//(families+=Family)*
		public Assignment getFamiliesAssignment() { return cFamiliesAssignment; }
		
		//Family
		public RuleCall getFamiliesFamilyParserRuleCall_0() { return cFamiliesFamilyParserRuleCall_0; }
	}
	public class FamilyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "asmae.ocl.family.Family.Family");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFamilyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLastNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLastNameIDTerminalRuleCall_1_0 = (RuleCall)cLastNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cFatherKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cFatherAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cFatherMemberCrossReference_3_1_0 = (CrossReference)cFatherAssignment_3_1.eContents().get(0);
		private final RuleCall cFatherMemberIDTerminalRuleCall_3_1_0_1 = (RuleCall)cFatherMemberCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cMotherKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cMotherAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cMotherMemberCrossReference_4_1_0 = (CrossReference)cMotherAssignment_4_1.eContents().get(0);
		private final RuleCall cMotherMemberIDTerminalRuleCall_4_1_0_1 = (RuleCall)cMotherMemberCrossReference_4_1_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cSonsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cSonsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cSonsMemberParserRuleCall_5_1_0 = (RuleCall)cSonsAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cDaughtersKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cDaughtersAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cDaughtersMemberParserRuleCall_6_1_0 = (RuleCall)cDaughtersAssignment_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Family:
		//    'Family' lastName=ID '{'
		//    ('Father' father=[Member])?
		//    ('Mother' mother=[Member])?
		//    ('Sons' (sons+=Member)+)?
		//    ('Daughters' (daughters+=Member)+)?
		//    '}'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'Family' lastName=ID '{'
		//('Father' father=[Member])?
		//('Mother' mother=[Member])?
		//('Sons' (sons+=Member)+)?
		//('Daughters' (daughters+=Member)+)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Family'
		public Keyword getFamilyKeyword_0() { return cFamilyKeyword_0; }
		
		//lastName=ID
		public Assignment getLastNameAssignment_1() { return cLastNameAssignment_1; }
		
		//ID
		public RuleCall getLastNameIDTerminalRuleCall_1_0() { return cLastNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('Father' father=[Member])?
		public Group getGroup_3() { return cGroup_3; }
		
		//'Father'
		public Keyword getFatherKeyword_3_0() { return cFatherKeyword_3_0; }
		
		//father=[Member]
		public Assignment getFatherAssignment_3_1() { return cFatherAssignment_3_1; }
		
		//[Member]
		public CrossReference getFatherMemberCrossReference_3_1_0() { return cFatherMemberCrossReference_3_1_0; }
		
		//ID
		public RuleCall getFatherMemberIDTerminalRuleCall_3_1_0_1() { return cFatherMemberIDTerminalRuleCall_3_1_0_1; }
		
		//('Mother' mother=[Member])?
		public Group getGroup_4() { return cGroup_4; }
		
		//'Mother'
		public Keyword getMotherKeyword_4_0() { return cMotherKeyword_4_0; }
		
		//mother=[Member]
		public Assignment getMotherAssignment_4_1() { return cMotherAssignment_4_1; }
		
		//[Member]
		public CrossReference getMotherMemberCrossReference_4_1_0() { return cMotherMemberCrossReference_4_1_0; }
		
		//ID
		public RuleCall getMotherMemberIDTerminalRuleCall_4_1_0_1() { return cMotherMemberIDTerminalRuleCall_4_1_0_1; }
		
		//('Sons' (sons+=Member)+)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'Sons'
		public Keyword getSonsKeyword_5_0() { return cSonsKeyword_5_0; }
		
		//(sons+=Member)+
		public Assignment getSonsAssignment_5_1() { return cSonsAssignment_5_1; }
		
		//Member
		public RuleCall getSonsMemberParserRuleCall_5_1_0() { return cSonsMemberParserRuleCall_5_1_0; }
		
		//('Daughters' (daughters+=Member)+)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'Daughters'
		public Keyword getDaughtersKeyword_6_0() { return cDaughtersKeyword_6_0; }
		
		//(daughters+=Member)+
		public Assignment getDaughtersAssignment_6_1() { return cDaughtersAssignment_6_1; }
		
		//Member
		public RuleCall getDaughtersMemberParserRuleCall_6_1_0() { return cDaughtersMemberParserRuleCall_6_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class MemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "asmae.ocl.family.Family.Member");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Member: name=ID ;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	
	
	private final FamilyModelElements pFamilyModel;
	private final FamilyElements pFamily;
	private final MemberElements pMember;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public FamilyGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pFamilyModel = new FamilyModelElements();
		this.pFamily = new FamilyElements();
		this.pMember = new MemberElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("asmae.ocl.family.Family".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//FamilyModel:
	//    (families+=Family)* ;
	public FamilyModelElements getFamilyModelAccess() {
		return pFamilyModel;
	}
	
	public ParserRule getFamilyModelRule() {
		return getFamilyModelAccess().getRule();
	}
	
	//Family:
	//    'Family' lastName=ID '{'
	//    ('Father' father=[Member])?
	//    ('Mother' mother=[Member])?
	//    ('Sons' (sons+=Member)+)?
	//    ('Daughters' (daughters+=Member)+)?
	//    '}'
	//    ;
	public FamilyElements getFamilyAccess() {
		return pFamily;
	}
	
	public ParserRule getFamilyRule() {
		return getFamilyAccess().getRule();
	}
	
	//Member: name=ID ;
	public MemberElements getMemberAccess() {
		return pMember;
	}
	
	public ParserRule getMemberRule() {
		return getMemberAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
