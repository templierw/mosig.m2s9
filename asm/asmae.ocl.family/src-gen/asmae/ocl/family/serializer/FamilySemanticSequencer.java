/*
 * generated by Xtext 2.25.0
 */
package asmae.ocl.family.serializer;

import asmae.ocl.family.family.Family;
import asmae.ocl.family.family.FamilyModel;
import asmae.ocl.family.family.FamilyPackage;
import asmae.ocl.family.family.Member;
import asmae.ocl.family.services.FamilyGrammarAccess;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class FamilySemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private FamilyGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == FamilyPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case FamilyPackage.FAMILY:
				sequence_Family(context, (Family) semanticObject); 
				return; 
			case FamilyPackage.FAMILY_MODEL:
				sequence_FamilyModel(context, (FamilyModel) semanticObject); 
				return; 
			case FamilyPackage.MEMBER:
				sequence_Member(context, (Member) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     FamilyModel returns FamilyModel
	 *
	 * Constraint:
	 *     families+=Family+
	 */
	protected void sequence_FamilyModel(ISerializationContext context, FamilyModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Family returns Family
	 *
	 * Constraint:
	 *     (lastName=ID father=[Member|ID]? mother=[Member|ID]? sons+=Member* daughters+=Member*)
	 */
	protected void sequence_Family(ISerializationContext context, Family semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Member returns Member
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Member(ISerializationContext context, Member semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FamilyPackage.Literals.MEMBER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FamilyPackage.Literals.MEMBER__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMemberAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
}
