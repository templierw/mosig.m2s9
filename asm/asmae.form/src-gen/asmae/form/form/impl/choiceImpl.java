/**
 * generated by Xtext 2.25.0
 */
package asmae.form.form.impl;

import asmae.form.form.FormPackage;
import asmae.form.form.check;
import asmae.form.form.choice;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>choice</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link asmae.form.form.impl.choiceImpl#getLesChoix <em>Les Choix</em>}</li>
 * </ul>
 *
 * @generated
 */
public class choiceImpl extends KindImpl implements choice
{
  /**
   * The cached value of the '{@link #getLesChoix() <em>Les Choix</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLesChoix()
   * @generated
   * @ordered
   */
  protected EList<check> lesChoix;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected choiceImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return FormPackage.Literals.CHOICE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<check> getLesChoix()
  {
    if (lesChoix == null)
    {
      lesChoix = new EObjectContainmentEList<check>(check.class, this, FormPackage.CHOICE__LES_CHOIX);
    }
    return lesChoix;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case FormPackage.CHOICE__LES_CHOIX:
        return ((InternalEList<?>)getLesChoix()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case FormPackage.CHOICE__LES_CHOIX:
        return getLesChoix();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case FormPackage.CHOICE__LES_CHOIX:
        getLesChoix().clear();
        getLesChoix().addAll((Collection<? extends check>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case FormPackage.CHOICE__LES_CHOIX:
        getLesChoix().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case FormPackage.CHOICE__LES_CHOIX:
        return lesChoix != null && !lesChoix.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //choiceImpl
