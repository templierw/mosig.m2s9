/*
 * generated by Xtext 2.25.0
 */
package asmae.form.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class FormGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "asmae.form.Form.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuestionnaireKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cLesQuestionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLesQuestionsQuestionParserRuleCall_2_0 = (RuleCall)cLesQuestionsAssignment_2.eContents().get(0);
		
		//Model :
		//    'Questionnaire' name=STRING (lesQuestions+=Question)* ;
		@Override public ParserRule getRule() { return rule; }
		
		//'Questionnaire' name=STRING (lesQuestions+=Question)*
		public Group getGroup() { return cGroup; }
		
		//'Questionnaire'
		public Keyword getQuestionnaireKeyword_0() { return cQuestionnaireKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
		
		//(lesQuestions+=Question)*
		public Assignment getLesQuestionsAssignment_2() { return cLesQuestionsAssignment_2; }
		
		//Question
		public RuleCall getLesQuestionsQuestionParserRuleCall_2_0() { return cLesQuestionsQuestionParserRuleCall_2_0; }
	}
	public class QuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "asmae.form.Form.Question");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuestionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLabelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLabelSTRINGTerminalRuleCall_1_0 = (RuleCall)cLabelAssignment_1.eContents().get(0);
		private final Assignment cKindOfAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cKindOfKindParserRuleCall_2_0 = (RuleCall)cKindOfAssignment_2.eContents().get(0);
		
		//Question :
		//    'Question' label=STRING kindOf=Kind;
		@Override public ParserRule getRule() { return rule; }
		
		//'Question' label=STRING kindOf=Kind
		public Group getGroup() { return cGroup; }
		
		//'Question'
		public Keyword getQuestionKeyword_0() { return cQuestionKeyword_0; }
		
		//label=STRING
		public Assignment getLabelAssignment_1() { return cLabelAssignment_1; }
		
		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_1_0() { return cLabelSTRINGTerminalRuleCall_1_0; }
		
		//kindOf=Kind
		public Assignment getKindOfAssignment_2() { return cKindOfAssignment_2; }
		
		//Kind
		public RuleCall getKindOfKindParserRuleCall_2_0() { return cKindOfKindParserRuleCall_2_0; }
	}
	public class KindElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "asmae.form.Form.Kind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInputParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cChoiceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOptionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Kind : input | choice | option ;
		@Override public ParserRule getRule() { return rule; }
		
		//input | choice | option
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//input
		public RuleCall getInputParserRuleCall_0() { return cInputParserRuleCall_0; }
		
		//choice
		public RuleCall getChoiceParserRuleCall_1() { return cChoiceParserRuleCall_1; }
		
		//option
		public RuleCall getOptionParserRuleCall_2() { return cOptionParserRuleCall_2; }
	}
	public class InputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "asmae.form.Form.input");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//input : name=ID ;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class ChoiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "asmae.form.Form.choice");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cLesChoixAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLesChoixCheckParserRuleCall_1_0 = (RuleCall)cLesChoixAssignment_1.eContents().get(0);
		
		//choice : name=ID (lesChoix+=check)+;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID (lesChoix+=check)+
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//(lesChoix+=check)+
		public Assignment getLesChoixAssignment_1() { return cLesChoixAssignment_1; }
		
		//check
		public RuleCall getLesChoixCheckParserRuleCall_1_0() { return cLesChoixCheckParserRuleCall_1_0; }
	}
	public class CheckElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "asmae.form.Form.check");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketRightSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLabelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLabelSTRINGTerminalRuleCall_1_0 = (RuleCall)cLabelAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//check : "[]" label=STRING name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//"[]" label=STRING name=ID
		public Group getGroup() { return cGroup; }
		
		//"[]"
		public Keyword getLeftSquareBracketRightSquareBracketKeyword_0() { return cLeftSquareBracketRightSquareBracketKeyword_0; }
		
		//label=STRING
		public Assignment getLabelAssignment_1() { return cLabelAssignment_1; }
		
		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_1_0() { return cLabelSTRINGTerminalRuleCall_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	public class OptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "asmae.form.Form.option");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cLesOptionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLesOptionsRadioParserRuleCall_1_0 = (RuleCall)cLesOptionsAssignment_1.eContents().get(0);
		
		//option : name=ID (lesOptions+=radio)+;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID (lesOptions+=radio)+
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//(lesOptions+=radio)+
		public Assignment getLesOptionsAssignment_1() { return cLesOptionsAssignment_1; }
		
		//radio
		public RuleCall getLesOptionsRadioParserRuleCall_1_0() { return cLesOptionsRadioParserRuleCall_1_0; }
	}
	public class RadioElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "asmae.form.Form.radio");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLabelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLabelSTRINGTerminalRuleCall_1_0 = (RuleCall)cLabelAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//radio: "()" label=STRING name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//"()" label=STRING name=ID
		public Group getGroup() { return cGroup; }
		
		//"()"
		public Keyword getLeftParenthesisRightParenthesisKeyword_0() { return cLeftParenthesisRightParenthesisKeyword_0; }
		
		//label=STRING
		public Assignment getLabelAssignment_1() { return cLabelAssignment_1; }
		
		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_1_0() { return cLabelSTRINGTerminalRuleCall_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	
	
	private final ModelElements pModel;
	private final QuestionElements pQuestion;
	private final KindElements pKind;
	private final InputElements pInput;
	private final ChoiceElements pChoice;
	private final CheckElements pCheck;
	private final OptionElements pOption;
	private final RadioElements pRadio;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public FormGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pQuestion = new QuestionElements();
		this.pKind = new KindElements();
		this.pInput = new InputElements();
		this.pChoice = new ChoiceElements();
		this.pCheck = new CheckElements();
		this.pOption = new OptionElements();
		this.pRadio = new RadioElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("asmae.form.Form".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model :
	//    'Questionnaire' name=STRING (lesQuestions+=Question)* ;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Question :
	//    'Question' label=STRING kindOf=Kind;
	public QuestionElements getQuestionAccess() {
		return pQuestion;
	}
	
	public ParserRule getQuestionRule() {
		return getQuestionAccess().getRule();
	}
	
	//Kind : input | choice | option ;
	public KindElements getKindAccess() {
		return pKind;
	}
	
	public ParserRule getKindRule() {
		return getKindAccess().getRule();
	}
	
	//input : name=ID ;
	public InputElements getInputAccess() {
		return pInput;
	}
	
	public ParserRule getInputRule() {
		return getInputAccess().getRule();
	}
	
	//choice : name=ID (lesChoix+=check)+;
	public ChoiceElements getChoiceAccess() {
		return pChoice;
	}
	
	public ParserRule getChoiceRule() {
		return getChoiceAccess().getRule();
	}
	
	//check : "[]" label=STRING name=ID;
	public CheckElements getCheckAccess() {
		return pCheck;
	}
	
	public ParserRule getCheckRule() {
		return getCheckAccess().getRule();
	}
	
	//option : name=ID (lesOptions+=radio)+;
	public OptionElements getOptionAccess() {
		return pOption;
	}
	
	public ParserRule getOptionRule() {
		return getOptionAccess().getRule();
	}
	
	//radio: "()" label=STRING name=ID;
	public RadioElements getRadioAccess() {
		return pRadio;
	}
	
	public ParserRule getRadioRule() {
		return getRadioAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
