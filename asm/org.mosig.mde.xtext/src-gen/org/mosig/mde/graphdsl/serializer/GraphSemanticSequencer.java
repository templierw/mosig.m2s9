/*
 * generated by Xtext 2.25.0
 */
package org.mosig.mde.graphdsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.mosig.mde.graphdsl.graph.Graph;
import org.mosig.mde.graphdsl.graph.GraphPackage;
import org.mosig.mde.graphdsl.graph.Node;
import org.mosig.mde.graphdsl.services.GraphGrammarAccess;

@SuppressWarnings("all")
public class GraphSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private GraphGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == GraphPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case GraphPackage.GRAPH:
				sequence_Graph(context, (Graph) semanticObject); 
				return; 
			case GraphPackage.NODE:
				sequence_Node(context, (Node) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Graph returns Graph
	 *
	 * Constraint:
	 *     theNodes+=Node+
	 */
	protected void sequence_Graph(ISerializationContext context, Graph semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Node returns Node
	 *
	 * Constraint:
	 *     (name=ID next+=[Node|ID]*)
	 */
	protected void sequence_Node(ISerializationContext context, Node semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
