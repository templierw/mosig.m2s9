/*
 * generated by Xtext 2.25.0
 */
package asmae.form.ide.contentassist.antlr;

import asmae.form.ide.contentassist.antlr.internal.InternalFormParser;
import asmae.form.services.FormGrammarAccess;
import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class FormParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(FormGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, FormGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getKindAccess().getAlternatives(), "rule__Kind__Alternatives");
			builder.put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
			builder.put(grammarAccess.getQuestionAccess().getGroup(), "rule__Question__Group__0");
			builder.put(grammarAccess.getChoiceAccess().getGroup(), "rule__Choice__Group__0");
			builder.put(grammarAccess.getCheckAccess().getGroup(), "rule__Check__Group__0");
			builder.put(grammarAccess.getOptionAccess().getGroup(), "rule__Option__Group__0");
			builder.put(grammarAccess.getRadioAccess().getGroup(), "rule__Radio__Group__0");
			builder.put(grammarAccess.getModelAccess().getNameAssignment_1(), "rule__Model__NameAssignment_1");
			builder.put(grammarAccess.getModelAccess().getLesQuestionsAssignment_2(), "rule__Model__LesQuestionsAssignment_2");
			builder.put(grammarAccess.getQuestionAccess().getLabelAssignment_1(), "rule__Question__LabelAssignment_1");
			builder.put(grammarAccess.getQuestionAccess().getKindOfAssignment_2(), "rule__Question__KindOfAssignment_2");
			builder.put(grammarAccess.getInputAccess().getNameAssignment(), "rule__Input__NameAssignment");
			builder.put(grammarAccess.getChoiceAccess().getNameAssignment_0(), "rule__Choice__NameAssignment_0");
			builder.put(grammarAccess.getChoiceAccess().getLesChoixAssignment_1(), "rule__Choice__LesChoixAssignment_1");
			builder.put(grammarAccess.getCheckAccess().getLabelAssignment_1(), "rule__Check__LabelAssignment_1");
			builder.put(grammarAccess.getCheckAccess().getNameAssignment_2(), "rule__Check__NameAssignment_2");
			builder.put(grammarAccess.getOptionAccess().getNameAssignment_0(), "rule__Option__NameAssignment_0");
			builder.put(grammarAccess.getOptionAccess().getLesOptionsAssignment_1(), "rule__Option__LesOptionsAssignment_1");
			builder.put(grammarAccess.getRadioAccess().getLabelAssignment_1(), "rule__Radio__LabelAssignment_1");
			builder.put(grammarAccess.getRadioAccess().getNameAssignment_2(), "rule__Radio__NameAssignment_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private FormGrammarAccess grammarAccess;

	@Override
	protected InternalFormParser createParser() {
		InternalFormParser result = new InternalFormParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public FormGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(FormGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
