/*
 * generated by Xtext 2.25.0
 */
package xtext.tutorial.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class AIRGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.tutorial.AIR.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIncludesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIncludesIncludesParserRuleCall_0_0 = (RuleCall)cIncludesAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cPlanesAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cPlanesPlaneParserRuleCall_1_0_0 = (RuleCall)cPlanesAssignment_1_0.eContents().get(0);
		private final Assignment cAirportsAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cAirportsAirportParserRuleCall_1_1_0 = (RuleCall)cAirportsAssignment_1_1.eContents().get(0);
		private final Assignment cAirlinesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAirlinesAirlineParserRuleCall_2_0 = (RuleCall)cAirlinesAssignment_2.eContents().get(0);
		
		//// R1 : Racine du fichier
		//Model:
		//    (includes+=Includes)*(planes+=Plane | airports+=Airport)*(airlines+=Airline)*;
		@Override public ParserRule getRule() { return rule; }
		
		//(includes+=Includes)*(planes+=Plane | airports+=Airport)*(airlines+=Airline)*
		public Group getGroup() { return cGroup; }
		
		//(includes+=Includes)*
		public Assignment getIncludesAssignment_0() { return cIncludesAssignment_0; }
		
		//Includes
		public RuleCall getIncludesIncludesParserRuleCall_0_0() { return cIncludesIncludesParserRuleCall_0_0; }
		
		//(planes+=Plane | airports+=Airport)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//planes+=Plane
		public Assignment getPlanesAssignment_1_0() { return cPlanesAssignment_1_0; }
		
		//Plane
		public RuleCall getPlanesPlaneParserRuleCall_1_0_0() { return cPlanesPlaneParserRuleCall_1_0_0; }
		
		//airports+=Airport
		public Assignment getAirportsAssignment_1_1() { return cAirportsAssignment_1_1; }
		
		//Airport
		public RuleCall getAirportsAirportParserRuleCall_1_1_0() { return cAirportsAirportParserRuleCall_1_1_0; }
		
		//(airlines+=Airline)*
		public Assignment getAirlinesAssignment_2() { return cAirlinesAssignment_2; }
		
		//Airline
		public RuleCall getAirlinesAirlineParserRuleCall_2_0() { return cAirlinesAirlineParserRuleCall_2_0; }
	}
	public class IncludesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.tutorial.AIR.Includes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIncludeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cImportURIAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportURIINCLUDETerminalRuleCall_2_0 = (RuleCall)cImportURIAssignment_2.eContents().get(0);
		private final Keyword cGreaterThanSignSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// R2 : Declaration des inclusions
		////la variable « includes » contiendra la liste de tous
		////les fichiers déclarés comme inclus dans ce fichier ;
		//Includes:
		//    '%include''<'importURI=INCLUDE'>;';
		@Override public ParserRule getRule() { return rule; }
		
		//'%include''<'importURI=INCLUDE'>;'
		public Group getGroup() { return cGroup; }
		
		//'%include'
		public Keyword getIncludeKeyword_0() { return cIncludeKeyword_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
		
		//importURI=INCLUDE
		public Assignment getImportURIAssignment_2() { return cImportURIAssignment_2; }
		
		//INCLUDE
		public RuleCall getImportURIINCLUDETerminalRuleCall_2_0() { return cImportURIINCLUDETerminalRuleCall_2_0; }
		
		//'>;'
		public Keyword getGreaterThanSignSemicolonKeyword_3() { return cGreaterThanSignSemicolonKeyword_3; }
	}
	public class PlaneElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.tutorial.AIR.Plane");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAvionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cUnorderedGroup_3.eContents().get(0);
		private final Keyword cPassagersKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Keyword cColonKeyword_3_0_1 = (Keyword)cGroup_3_0.eContents().get(1);
		private final Assignment cPassengersAssignment_3_0_2 = (Assignment)cGroup_3_0.eContents().get(2);
		private final RuleCall cPassengersINTTerminalRuleCall_3_0_2_0 = (RuleCall)cPassengersAssignment_3_0_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_0_3 = (Keyword)cGroup_3_0.eContents().get(3);
		private final Group cGroup_3_1 = (Group)cUnorderedGroup_3.eContents().get(1);
		private final Keyword cMotorisationKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Keyword cColonKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final Assignment cMotorisationAssignment_3_1_2 = (Assignment)cGroup_3_1.eContents().get(2);
		private final RuleCall cMotorisationEnginesEnumRuleCall_3_1_2_0 = (RuleCall)cMotorisationAssignment_3_1_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1_3 = (Keyword)cGroup_3_1.eContents().get(3);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// R3 : Declaration des avions
		//Plane:
		//    'Avion' name=ID ':'
		//    ('Passagers'':'passengers=INT ';'
		//&    'Motorisation'':'motorisation=Engines';')
		//    'End.';
		@Override public ParserRule getRule() { return rule; }
		
		//    'Avion' name=ID ':'
		//    ('Passagers'':'passengers=INT ';'
		//&    'Motorisation'':'motorisation=Engines';')
		//    'End.'
		public Group getGroup() { return cGroup; }
		
		//'Avion'
		public Keyword getAvionKeyword_0() { return cAvionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//    ('Passagers'':'passengers=INT ';'
		//&    'Motorisation'':'motorisation=Engines';')
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }
		
		//'Passagers'':'passengers=INT ';'
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//'Passagers'
		public Keyword getPassagersKeyword_3_0_0() { return cPassagersKeyword_3_0_0; }
		
		//':'
		public Keyword getColonKeyword_3_0_1() { return cColonKeyword_3_0_1; }
		
		//passengers=INT
		public Assignment getPassengersAssignment_3_0_2() { return cPassengersAssignment_3_0_2; }
		
		//INT
		public RuleCall getPassengersINTTerminalRuleCall_3_0_2_0() { return cPassengersINTTerminalRuleCall_3_0_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3_0_3() { return cSemicolonKeyword_3_0_3; }
		
		//'Motorisation'':'motorisation=Engines';'
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'Motorisation'
		public Keyword getMotorisationKeyword_3_1_0() { return cMotorisationKeyword_3_1_0; }
		
		//':'
		public Keyword getColonKeyword_3_1_1() { return cColonKeyword_3_1_1; }
		
		//motorisation=Engines
		public Assignment getMotorisationAssignment_3_1_2() { return cMotorisationAssignment_3_1_2; }
		
		//Engines
		public RuleCall getMotorisationEnginesEnumRuleCall_3_1_2_0() { return cMotorisationEnginesEnumRuleCall_3_1_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3_1_3() { return cSemicolonKeyword_3_1_3; }
		
		//'End.'
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
	}
	public class AirportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.tutorial.AIR.Airport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAeroportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTitleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTitleSTRINGTerminalRuleCall_1_0 = (RuleCall)cTitleAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cUnorderedGroup_3.eContents().get(0);
		private final Keyword cOACIKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Keyword cColonKeyword_3_0_1 = (Keyword)cGroup_3_0.eContents().get(1);
		private final Assignment cNameAssignment_3_0_2 = (Assignment)cGroup_3_0.eContents().get(2);
		private final RuleCall cNameCodeOACIParserRuleCall_3_0_2_0 = (RuleCall)cNameAssignment_3_0_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_0_3 = (Keyword)cGroup_3_0.eContents().get(3);
		private final Group cGroup_3_1 = (Group)cUnorderedGroup_3.eContents().get(1);
		private final Keyword cPaysKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Keyword cColonKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final Assignment cCountryAssignment_3_1_2 = (Assignment)cGroup_3_1.eContents().get(2);
		private final RuleCall cCountrySTRINGTerminalRuleCall_3_1_2_0 = (RuleCall)cCountryAssignment_3_1_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1_3 = (Keyword)cGroup_3_1.eContents().get(3);
		private final Group cGroup_3_2 = (Group)cUnorderedGroup_3.eContents().get(2);
		private final Keyword cPistesKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Keyword cColonKeyword_3_2_1 = (Keyword)cGroup_3_2.eContents().get(1);
		private final Assignment cRunwaysAssignment_3_2_2 = (Assignment)cGroup_3_2.eContents().get(2);
		private final RuleCall cRunwaysINTTerminalRuleCall_3_2_2_0 = (RuleCall)cRunwaysAssignment_3_2_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_2_3 = (Keyword)cGroup_3_2.eContents().get(3);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// R4 : Declaration des aeroports
		//Airport:
		//    'Aeroport' title=STRING ':'
		//    ('OACI'':' name=CodeOACI';'
		//&    'Pays'':'country=STRING';'
		//&    'Pistes'':'runways=INT';')
		//    'End.';
		@Override public ParserRule getRule() { return rule; }
		
		//    'Aeroport' title=STRING ':'
		//    ('OACI'':' name=CodeOACI';'
		//&    'Pays'':'country=STRING';'
		//&    'Pistes'':'runways=INT';')
		//    'End.'
		public Group getGroup() { return cGroup; }
		
		//'Aeroport'
		public Keyword getAeroportKeyword_0() { return cAeroportKeyword_0; }
		
		//title=STRING
		public Assignment getTitleAssignment_1() { return cTitleAssignment_1; }
		
		//STRING
		public RuleCall getTitleSTRINGTerminalRuleCall_1_0() { return cTitleSTRINGTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//    ('OACI'':' name=CodeOACI';'
		//&    'Pays'':'country=STRING';'
		//&    'Pistes'':'runways=INT';')
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }
		
		//'OACI'':' name=CodeOACI';'
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//'OACI'
		public Keyword getOACIKeyword_3_0_0() { return cOACIKeyword_3_0_0; }
		
		//':'
		public Keyword getColonKeyword_3_0_1() { return cColonKeyword_3_0_1; }
		
		//name=CodeOACI
		public Assignment getNameAssignment_3_0_2() { return cNameAssignment_3_0_2; }
		
		//CodeOACI
		public RuleCall getNameCodeOACIParserRuleCall_3_0_2_0() { return cNameCodeOACIParserRuleCall_3_0_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3_0_3() { return cSemicolonKeyword_3_0_3; }
		
		//'Pays'':'country=STRING';'
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'Pays'
		public Keyword getPaysKeyword_3_1_0() { return cPaysKeyword_3_1_0; }
		
		//':'
		public Keyword getColonKeyword_3_1_1() { return cColonKeyword_3_1_1; }
		
		//country=STRING
		public Assignment getCountryAssignment_3_1_2() { return cCountryAssignment_3_1_2; }
		
		//STRING
		public RuleCall getCountrySTRINGTerminalRuleCall_3_1_2_0() { return cCountrySTRINGTerminalRuleCall_3_1_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3_1_3() { return cSemicolonKeyword_3_1_3; }
		
		//'Pistes'':'runways=INT';'
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//'Pistes'
		public Keyword getPistesKeyword_3_2_0() { return cPistesKeyword_3_2_0; }
		
		//':'
		public Keyword getColonKeyword_3_2_1() { return cColonKeyword_3_2_1; }
		
		//runways=INT
		public Assignment getRunwaysAssignment_3_2_2() { return cRunwaysAssignment_3_2_2; }
		
		//INT
		public RuleCall getRunwaysINTTerminalRuleCall_3_2_2_0() { return cRunwaysINTTerminalRuleCall_3_2_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3_2_3() { return cSemicolonKeyword_3_2_3; }
		
		//'End.'
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
	}
	public class AirlineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.tutorial.AIR.Airline");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLigneKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cUnorderedGroup_3.eContents().get(0);
		private final Keyword cAvionKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Keyword cColonKeyword_3_0_1 = (Keyword)cGroup_3_0.eContents().get(1);
		private final Assignment cPlaneAssignment_3_0_2 = (Assignment)cGroup_3_0.eContents().get(2);
		private final CrossReference cPlanePlaneCrossReference_3_0_2_0 = (CrossReference)cPlaneAssignment_3_0_2.eContents().get(0);
		private final RuleCall cPlanePlaneIDTerminalRuleCall_3_0_2_0_1 = (RuleCall)cPlanePlaneCrossReference_3_0_2_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3_0_3 = (Keyword)cGroup_3_0.eContents().get(3);
		private final Group cGroup_3_1 = (Group)cUnorderedGroup_3.eContents().get(1);
		private final Keyword cCompagnieKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Keyword cColonKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final Assignment cCompanyAssignment_3_1_2 = (Assignment)cGroup_3_1.eContents().get(2);
		private final RuleCall cCompanySTRINGTerminalRuleCall_3_1_2_0 = (RuleCall)cCompanyAssignment_3_1_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1_3 = (Keyword)cGroup_3_1.eContents().get(3);
		private final Group cGroup_3_2 = (Group)cUnorderedGroup_3.eContents().get(2);
		private final Keyword cDepartKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Keyword cColonKeyword_3_2_1 = (Keyword)cGroup_3_2.eContents().get(1);
		private final Assignment cDepartureAssignment_3_2_2 = (Assignment)cGroup_3_2.eContents().get(2);
		private final CrossReference cDepartureCodeOACICrossReference_3_2_2_0 = (CrossReference)cDepartureAssignment_3_2_2.eContents().get(0);
		private final RuleCall cDepartureCodeOACIOACITerminalRuleCall_3_2_2_0_1 = (RuleCall)cDepartureCodeOACICrossReference_3_2_2_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3_2_3 = (Keyword)cGroup_3_2.eContents().get(3);
		private final Group cGroup_3_3 = (Group)cUnorderedGroup_3.eContents().get(3);
		private final Keyword cArriveeKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Keyword cColonKeyword_3_3_1 = (Keyword)cGroup_3_3.eContents().get(1);
		private final Assignment cArrivalAssignment_3_3_2 = (Assignment)cGroup_3_3.eContents().get(2);
		private final CrossReference cArrivalCodeOACICrossReference_3_3_2_0 = (CrossReference)cArrivalAssignment_3_3_2.eContents().get(0);
		private final RuleCall cArrivalCodeOACIOACITerminalRuleCall_3_3_2_0_1 = (RuleCall)cArrivalCodeOACICrossReference_3_3_2_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3_3_3 = (Keyword)cGroup_3_3.eContents().get(3);
		private final Group cGroup_3_4 = (Group)cUnorderedGroup_3.eContents().get(4);
		private final Keyword cDureeKeyword_3_4_0 = (Keyword)cGroup_3_4.eContents().get(0);
		private final Keyword cColonKeyword_3_4_1 = (Keyword)cGroup_3_4.eContents().get(1);
		private final Assignment cDurationAssignment_3_4_2 = (Assignment)cGroup_3_4.eContents().get(2);
		private final RuleCall cDurationDURATIONTerminalRuleCall_3_4_2_0 = (RuleCall)cDurationAssignment_3_4_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_4_3 = (Keyword)cGroup_3_4.eContents().get(3);
		private final Assignment cRegularAssignment_3_5 = (Assignment)cUnorderedGroup_3.eContents().get(5);
		private final Keyword cRegularREGULIEREKeyword_3_5_0 = (Keyword)cRegularAssignment_3_5.eContents().get(0);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// R5 : Declaration des lignes aeriennes
		//Airline:
		//    'Ligne' name=STRING ':'
		//    ('Avion'':'plane=[Plane]';'
		//&    'Compagnie'':'company=STRING';'
		//&    'Depart'':' departure=[CodeOACI|OACI]';'
		//&    'Arrivee'':'arrival=[CodeOACI|OACI]';'
		//&    'Duree'':' duration=DURATION';'
		//&    regular?='REGULIERE;'?)
		//    'End.';
		@Override public ParserRule getRule() { return rule; }
		
		//    'Ligne' name=STRING ':'
		//    ('Avion'':'plane=[Plane]';'
		//&    'Compagnie'':'company=STRING';'
		//&    'Depart'':' departure=[CodeOACI|OACI]';'
		//&    'Arrivee'':'arrival=[CodeOACI|OACI]';'
		//&    'Duree'':' duration=DURATION';'
		//&    regular?='REGULIERE;'?)
		//    'End.'
		public Group getGroup() { return cGroup; }
		
		//'Ligne'
		public Keyword getLigneKeyword_0() { return cLigneKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//    ('Avion'':'plane=[Plane]';'
		//&    'Compagnie'':'company=STRING';'
		//&    'Depart'':' departure=[CodeOACI|OACI]';'
		//&    'Arrivee'':'arrival=[CodeOACI|OACI]';'
		//&    'Duree'':' duration=DURATION';'
		//&    regular?='REGULIERE;'?)
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }
		
		//'Avion'':'plane=[Plane]';'
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//'Avion'
		public Keyword getAvionKeyword_3_0_0() { return cAvionKeyword_3_0_0; }
		
		//':'
		public Keyword getColonKeyword_3_0_1() { return cColonKeyword_3_0_1; }
		
		//plane=[Plane]
		public Assignment getPlaneAssignment_3_0_2() { return cPlaneAssignment_3_0_2; }
		
		//[Plane]
		public CrossReference getPlanePlaneCrossReference_3_0_2_0() { return cPlanePlaneCrossReference_3_0_2_0; }
		
		//ID
		public RuleCall getPlanePlaneIDTerminalRuleCall_3_0_2_0_1() { return cPlanePlaneIDTerminalRuleCall_3_0_2_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_3_0_3() { return cSemicolonKeyword_3_0_3; }
		
		//'Compagnie'':'company=STRING';'
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'Compagnie'
		public Keyword getCompagnieKeyword_3_1_0() { return cCompagnieKeyword_3_1_0; }
		
		//':'
		public Keyword getColonKeyword_3_1_1() { return cColonKeyword_3_1_1; }
		
		//company=STRING
		public Assignment getCompanyAssignment_3_1_2() { return cCompanyAssignment_3_1_2; }
		
		//STRING
		public RuleCall getCompanySTRINGTerminalRuleCall_3_1_2_0() { return cCompanySTRINGTerminalRuleCall_3_1_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3_1_3() { return cSemicolonKeyword_3_1_3; }
		
		//'Depart'':' departure=[CodeOACI|OACI]';'
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//'Depart'
		public Keyword getDepartKeyword_3_2_0() { return cDepartKeyword_3_2_0; }
		
		//':'
		public Keyword getColonKeyword_3_2_1() { return cColonKeyword_3_2_1; }
		
		//departure=[CodeOACI|OACI]
		public Assignment getDepartureAssignment_3_2_2() { return cDepartureAssignment_3_2_2; }
		
		//[CodeOACI|OACI]
		public CrossReference getDepartureCodeOACICrossReference_3_2_2_0() { return cDepartureCodeOACICrossReference_3_2_2_0; }
		
		//OACI
		public RuleCall getDepartureCodeOACIOACITerminalRuleCall_3_2_2_0_1() { return cDepartureCodeOACIOACITerminalRuleCall_3_2_2_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_3_2_3() { return cSemicolonKeyword_3_2_3; }
		
		//'Arrivee'':'arrival=[CodeOACI|OACI]';'
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//'Arrivee'
		public Keyword getArriveeKeyword_3_3_0() { return cArriveeKeyword_3_3_0; }
		
		//':'
		public Keyword getColonKeyword_3_3_1() { return cColonKeyword_3_3_1; }
		
		//arrival=[CodeOACI|OACI]
		public Assignment getArrivalAssignment_3_3_2() { return cArrivalAssignment_3_3_2; }
		
		//[CodeOACI|OACI]
		public CrossReference getArrivalCodeOACICrossReference_3_3_2_0() { return cArrivalCodeOACICrossReference_3_3_2_0; }
		
		//OACI
		public RuleCall getArrivalCodeOACIOACITerminalRuleCall_3_3_2_0_1() { return cArrivalCodeOACIOACITerminalRuleCall_3_3_2_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_3_3_3() { return cSemicolonKeyword_3_3_3; }
		
		//'Duree'':' duration=DURATION';'
		public Group getGroup_3_4() { return cGroup_3_4; }
		
		//'Duree'
		public Keyword getDureeKeyword_3_4_0() { return cDureeKeyword_3_4_0; }
		
		//':'
		public Keyword getColonKeyword_3_4_1() { return cColonKeyword_3_4_1; }
		
		//duration=DURATION
		public Assignment getDurationAssignment_3_4_2() { return cDurationAssignment_3_4_2; }
		
		//DURATION
		public RuleCall getDurationDURATIONTerminalRuleCall_3_4_2_0() { return cDurationDURATIONTerminalRuleCall_3_4_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3_4_3() { return cSemicolonKeyword_3_4_3; }
		
		//regular?='REGULIERE;'?
		public Assignment getRegularAssignment_3_5() { return cRegularAssignment_3_5; }
		
		//'REGULIERE;'
		public Keyword getRegularREGULIEREKeyword_3_5_0() { return cRegularREGULIEREKeyword_3_5_0; }
		
		//'End.'
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
	}
	public class CodeOACIElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.tutorial.AIR.CodeOACI");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameOACITerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//// R8 : Declaration du code OACI
		//CodeOACI : name=OACI;
		@Override public ParserRule getRule() { return rule; }
		
		//name=OACI
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//OACI
		public RuleCall getNameOACITerminalRuleCall_0() { return cNameOACITerminalRuleCall_0; }
	}
	
	public class EnginesElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.tutorial.AIR.Engines");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPROPELLEREnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPROPELLERHELICESKeyword_0_0 = (Keyword)cPROPELLEREnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cENGINEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cENGINEPROPULSEURSKeyword_1_0 = (Keyword)cENGINEEnumLiteralDeclaration_1.eContents().get(0);
		
		////la variable « regular » recevra « true » si l'utilisateur entre 'REGULIERE' dans son fichier.
		//// R6 : Enumeration des motorisations
		//enum Engines:
		//  PROPELLER ='HELICES' | ENGINE = 'PROPULSEURS'    ;
		public EnumRule getRule() { return rule; }
		
		//PROPELLER ='HELICES' | ENGINE = 'PROPULSEURS'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PROPELLER ='HELICES'
		public EnumLiteralDeclaration getPROPELLEREnumLiteralDeclaration_0() { return cPROPELLEREnumLiteralDeclaration_0; }
		
		//'HELICES'
		public Keyword getPROPELLERHELICESKeyword_0_0() { return cPROPELLERHELICESKeyword_0_0; }
		
		//ENGINE = 'PROPULSEURS'
		public EnumLiteralDeclaration getENGINEEnumLiteralDeclaration_1() { return cENGINEEnumLiteralDeclaration_1; }
		
		//'PROPULSEURS'
		public Keyword getENGINEPROPULSEURSKeyword_1_0() { return cENGINEPROPULSEURSKeyword_1_0; }
	}
	
	private final ModelElements pModel;
	private final IncludesElements pIncludes;
	private final PlaneElements pPlane;
	private final AirportElements pAirport;
	private final AirlineElements pAirline;
	private final EnginesElements eEngines;
	private final TerminalRule tDURATION;
	private final CodeOACIElements pCodeOACI;
	private final TerminalRule tOACI;
	private final TerminalRule tINCLUDE;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public AIRGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pIncludes = new IncludesElements();
		this.pPlane = new PlaneElements();
		this.pAirport = new AirportElements();
		this.pAirline = new AirlineElements();
		this.eEngines = new EnginesElements();
		this.tDURATION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.tutorial.AIR.DURATION");
		this.pCodeOACI = new CodeOACIElements();
		this.tOACI = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.tutorial.AIR.OACI");
		this.tINCLUDE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.tutorial.AIR.INCLUDE");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("xtext.tutorial.AIR".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//// R1 : Racine du fichier
	//Model:
	//    (includes+=Includes)*(planes+=Plane | airports+=Airport)*(airlines+=Airline)*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//// R2 : Declaration des inclusions
	////la variable « includes » contiendra la liste de tous
	////les fichiers déclarés comme inclus dans ce fichier ;
	//Includes:
	//    '%include''<'importURI=INCLUDE'>;';
	public IncludesElements getIncludesAccess() {
		return pIncludes;
	}
	
	public ParserRule getIncludesRule() {
		return getIncludesAccess().getRule();
	}
	
	//// R3 : Declaration des avions
	//Plane:
	//    'Avion' name=ID ':'
	//    ('Passagers'':'passengers=INT ';'
	//&    'Motorisation'':'motorisation=Engines';')
	//    'End.';
	public PlaneElements getPlaneAccess() {
		return pPlane;
	}
	
	public ParserRule getPlaneRule() {
		return getPlaneAccess().getRule();
	}
	
	//// R4 : Declaration des aeroports
	//Airport:
	//    'Aeroport' title=STRING ':'
	//    ('OACI'':' name=CodeOACI';'
	//&    'Pays'':'country=STRING';'
	//&    'Pistes'':'runways=INT';')
	//    'End.';
	public AirportElements getAirportAccess() {
		return pAirport;
	}
	
	public ParserRule getAirportRule() {
		return getAirportAccess().getRule();
	}
	
	//// R5 : Declaration des lignes aeriennes
	//Airline:
	//    'Ligne' name=STRING ':'
	//    ('Avion'':'plane=[Plane]';'
	//&    'Compagnie'':'company=STRING';'
	//&    'Depart'':' departure=[CodeOACI|OACI]';'
	//&    'Arrivee'':'arrival=[CodeOACI|OACI]';'
	//&    'Duree'':' duration=DURATION';'
	//&    regular?='REGULIERE;'?)
	//    'End.';
	public AirlineElements getAirlineAccess() {
		return pAirline;
	}
	
	public ParserRule getAirlineRule() {
		return getAirlineAccess().getRule();
	}
	
	////la variable « regular » recevra « true » si l'utilisateur entre 'REGULIERE' dans son fichier.
	//// R6 : Enumeration des motorisations
	//enum Engines:
	//  PROPELLER ='HELICES' | ENGINE = 'PROPULSEURS'    ;
	public EnginesElements getEnginesAccess() {
		return eEngines;
	}
	
	public EnumRule getEnginesRule() {
		return getEnginesAccess().getRule();
	}
	
	//// R7 : Duree de vol
	//terminal DURATION : (('0'..'2''0'..'9')'h')?('0'..'5''0'..'9')'m';
	public TerminalRule getDURATIONRule() {
		return tDURATION;
	}
	
	//// R8 : Declaration du code OACI
	//CodeOACI : name=OACI;
	public CodeOACIElements getCodeOACIAccess() {
		return pCodeOACI;
	}
	
	public ParserRule getCodeOACIRule() {
		return getCodeOACIAccess().getRule();
	}
	
	//terminal OACI : ('A'..'Z')('A'..'Z')('A'..'Z')('A'..'Z');
	public TerminalRule getOACIRule() {
		return tOACI;
	}
	
	//// R9 : Reconnaissance des fichiers inclus
	//terminal INCLUDE: ID('.air');
	public TerminalRule getINCLUDERule() {
		return tINCLUDE;
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
